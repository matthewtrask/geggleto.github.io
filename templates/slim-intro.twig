{% extends "layout.twig" %}
{% block leftsidebar %}
    <img src="/images/3d1953e.jpg">
    <br />
    Glenn Eggleton<br />
    @geggleto <br />
{% endblock %}
{% block content %}
                    <img src="http://www.slimframework.com/assets/images/swag-sticker-text.png">
                    <br />
                    <h2>Getting to know Slim 3.x</h2>
                    <p>
                        For those uninitiated Slim is an unopinionated php micro-framework.
                        Slim lets you do things how you want, and does not force you into structures or patterns. <br />
                        In this blog post we are going to cover the basics and get you up and running quickly with Slim<br/>
                        <br />
                        Let's take a look at a "Hello world" App
                        <br />
                        <pre>
<code class="PHP">//It's recommended that you install it via composer
//composer require slim/slim "^3.0@RC"

require 'vendor/autoload.php';

$app = new Slim\App();

/**
ServerRequestInterface - $request
ResponseInterface - $response
Array - $args
*/

$app->get('/hello', function ($request, $response, $args) {
    $response->write("Hello World");
    return $response;
});

$app->run();</code>
                        </pre>
                        <br />
                        At it's core Slim is a middleware runner. You will need to get used to the $request, $response, $args pattern.<br />
                        Acccessing the /hello url will return what you expect.<br />
                        <br />
                        Slim 3 is fully PSR-7 compliant [Read about it <a href="http://www.php-fig.org/psr/psr-7/">here</a>].
                    Minimally this means it takes a browser "Request", applies middleware, and returns a "Response". <br />
                    </p>

                    <h2>Request</h2>
                    <p>
                        Almost all instances of the Request refer to a ServerRequest. This is what Slim constructs from your web server and the rest of the environment. It includes all header information. There is one gotcha though, be careful when you are using Apache, it strips out the Authorization Header. See <a href="https://github.com/slimphp/Slim/issues/1616">this issue</a>
                    </p>

                    <h2>Response</h2>
                    <p>
                        This object holds the data you want to send to the browser and it includes HTTP Headers [Cookie or Session], Status Code [200 Right?], body [Your Content ;)].
                    </p>

                    <h2>What about Dependencies?</h2>
                    <p>
                        Slim 3 by default uses the Pimple Dependency Injection Container [DiC]. Those switching from Slim 2 please pay attention to this section. <br />
                        <strong>Slim 3 does not work like Slim 2</strong>
                        <br />
                        In Slim 2, you can pass around the "Slim" class like hot potatoes [Resource Locator]. In Slim 3 this is not the way we want to do things. <br />
                        The preferred way to do things is via proper Dependency Injection, this is why we have Pimple and a DiC. <br />
                        <br />
                        First off, Slim 3 knows that migrating is going to be a royal <strong>PAIN</strong>. Anything that is not created in the DiC Slim 3 happily passes the DiC to the class. <br />
                        So, fear not friends, you wont spend 100s of hours rewiring it all. <br />
                        <br />
                        Lets take a look at DI in Slim 3<br />
<pre>
<code class="PHP">//Lets Grab the DiC

$container = $app->getContainer();

//This replaces the $app->singleton() in Slim v2
$container['MyController'] = function ($c) {
    //This is constructor injection
    return new Controller($c['MyOtherDependency']);
};

//Magic!
//Example Controller
$app->get('/hi', function ($req, $res, $args) {
    return $this->MyController->myAction($req, $res, $args);
});

//..</code>
</pre>

                        <br />
                        So let's talk about this magic. How does $this get the dependency, and what the heck is "this".<br />
                        <br />
                        <strong>"this"</strong><br />
                        Believe it or not, "this" is actually the App class. $app->get() bind's the App class to the function.<br />
                        The app class direct's all not-defined items to the container via PHP's magic methods, which is how your dependency is found!<br/>
                        <br />
                    </p>

                        <h2>Middleware</h2>
                    <p>
                        Middleware are pieces of code that you want to run before your route or after it.
                        Typical middlewares are things like authentication or session libraries. <br/>
                        There are 2 different types of Middleware, application wide and route specific. Both have the exact same functionality and the only difference is where and when it gets applied.<br />
                        <strong>Application</strong> wide middleware are applied to all routes in your application and as you expect the route specific ones are applied to a route or route group.<br />
                        <br />
                        So let's take a look at those.
<pre>
<code class="PHP">$middleware = function ($req, $res, $next) {
    //Do Something before we execute logic
    $response =  $next($req, $res);
    //Do something after we run our logic, maybe logging?
    return $response;
};

//Apply it Site Wide
$app->add($middleware);

//Apply it per route
$app->get('/hi', function ($req, $res, $args) {
    return $this->MyController->myAction($req, $res, $args);
})->add($middleware);

//..</code>
</pre>

                    <h2>Route Parameters</h2>
                    <p>
                        The syntax for routing parameters has changed from Slim 2 to 3. Be wary of older articles! <br />
                        <strong>OLD </strong><pre><code class="PHP">$app->get('/:id/');</code></pre><br />
                        <strong>NEW </strong><pre><code class="PHP">$app->get('/{id}/');</code></pre><br />
                        <br />
                        Route arguments are now merged into the $args variable of the Route Callable, with the index of your parameter.<br />
                        <strong>Example: </strong><br />
                        <pre><code class="PHP">$app->get('/{id}/', function ($req, $res, $args) {
    $id = $args['id']; // Here is your Argument
});</code></pre>
                    </p>
                    <h2>Router</h2>
                    <p>
                        The Router changed to Nikic's Fast-Router and has a ton of different options. Read about it <a href="https://github.com/nikic/FastRoute">here</a>
                    </p>
                    <h2>POST'ing</h2>
                    <p>
                    A lot of new comers to PSR-7 have a difficult time with how to access Query Parameters and POST data.
                    Its actually quite easy, but not very straight forward. <br /> <br />
                    <strong>_GET </strong><pre><code class="PHP">$my_get = $request->getQueryParams();</code></pre><br />
                    <strong>_POST </strong><pre><code class="PHP">$my_post = $request->getParsedBody();</code></pre><br />
                    </p>

                    Happy Coding!<br />
{% endblock %}